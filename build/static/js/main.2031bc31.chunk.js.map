{"version":3,"sources":["actions/login.js","reducers/loggedCustomerReducer.js","api/tasks.js","actions/tasks.js","reducers/tasksReducer.js","reducers/index.js","store.js","containers/components/Login.js","containers/Header.js","components/Footer.js","components/loading/Loading.js","components/Pagination.js","containers/task-list/TaskList.js","containers/task-item/TaskItem.js","containers/home/Home.js","router.js","serviceWorker.js","index.js"],"names":["SET_LOGGED_CUSTOMER","CLEAR_LOGGED_CUSTOMER","CUSTOMER_LOGIN_PENDING","initialState","pending","logged","loggedCustomerReducer","state","arguments","length","undefined","action","type","Object","objectSpread","customer","payload","API_SERVER","checkResponse","_x","_checkResponse","apply","this","_callee2","response","regenerator_default","a","wrap","_context2","prev","next","then","res","json","err","code","message","catch","Response","status","statusText","abrupt","sent","stop","get","_callee3","_ref","path","_ref$method","method","postData","getParams","request","requestPath","_context3","toUpperCase","assign","body","JSON","stringify","encodeURI","entries","map","itm","concat","join","fetch","tasks","_get2","asyncToGenerator","mark","_callee","page","sort","_args","_context","developer","REQUEST_TASKS","RECEIVE_TASKS","SET_TASKS_SORT","receiveTasks","data","fetchTasks","dispatch","getState","_getState","_getState$tasksState","pagination","requiredPage","result","tasksState","tasksApi","_x2","updateIfNeeded","isFetching","items","didInvalidate","lastUpdate","Date","now","sortTasks","fieldName","setTasksSort","initalState","error","tasksReducer","newState","total","Math","floor","total_task_count","newSort","sort_field","sort_direction","rootReducer","combineReducers","loggedCustomerState","middlewares","thunkMiddleware","store","createStore","applyMiddleware","Login","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateState","e","setState","defineProperty","target","name","value","doLogout","doLogin","preventDefault","_this$state","password","setTimeout","login","role","toast","_this$state2","react_default","createElement","Fragment","className","href","onClick","onSubmit","id","placeholder","onChange","disabled","Component","connect","_ref$loggedCustomerSt","Header","Link","to","components_Login","Footer","Loading","dark","relative","getPages","pages","i","push","Pagination","loadPage","aria-label","key","TaskList","viewTask","history","_this2","_this$props","idx","checked","username","email","text","components_Pagination","_ref$tasksState","TaskItem","task","replace","src","image_path","alt","goBack","_ref2","match","params","Home","containers_Header","Switch","Route","exact","component","Redirect","components_Footer","lib","autoClose","components_loading_Loading","router","es","BrowserRouter","Boolean","window","location","hostname","ReactDOM","render","src_router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2031bc31.chunk.js","sourcesContent":["export const SET_LOGGED_CUSTOMER = 'SET_LOGGED_CUSTOMER';\nexport const CLEAR_LOGGED_CUSTOMER = 'CLEAR_LOGGED_CUSTOMER';\nexport const CUSTOMER_LOGIN_PENDING = 'CUSTOMER_LOGIN_PENDING';\n\nexport function setLoggedCustomer(customer) {\n    return {\n        type: SET_LOGGED_CUSTOMER,\n        payload: customer\n    };\n}\n\nexport function logoutCustomer() {\n    return {\n        type: CLEAR_LOGGED_CUSTOMER,\n    };\n}\n\nexport function customerLoginPending() {\n    return {\n        type: CUSTOMER_LOGIN_PENDING\n    };\n}\n","import { SET_LOGGED_CUSTOMER, CUSTOMER_LOGIN_PENDING, CLEAR_LOGGED_CUSTOMER } from '../actions/login';\n\nconst initialState = {\n    pending: false,\n    logged: false\n};\n\nconst loggedCustomerReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_LOGGED_CUSTOMER:\n\n            return {\n                ...state,\n                logged: true,\n                pending: false,\n                customer: {\n                    ...action.payload,\n                },\n            };\n        case CUSTOMER_LOGIN_PENDING:\n            return {\n                ...state,\n                pending: true\n            };\n        case CLEAR_LOGGED_CUSTOMER:\n            return {\n                ...state,\n                logged: false,\n                customer: null,\n                pending: false\n            };\n\n            default:\n            return state;\n    }\n};\n\nexport default loggedCustomerReducer;\n","export const API_SERVER = 'https://uxcandy.com/~shapoval/test-task-backend';\nexport const API_SECRET = 'Name';\n\nconst tasks = {\n    async get(page = 1, sort = {}) {\n        return await get({\n            path: '/',\n            getParams: {\n                developer: API_SECRET,\n                page,\n                ...sort,\n            }\n        });\n    }\n};\n\nexport async function checkResponse(response) {\n\n    return await response\n        .then(res => {\n            return res.json();\n        }, err => ({\n            code: 504,\n            message: 'Server timeout'\n        }))\n        .catch(() => response)\n        .then(res => {\n            if (res instanceof Response === false) {\n                return res;\n            }\n\n            return {\n                status: 'error',\n                message: res.statusText,\n            };\n        });\n}\n\nexport async function get({ path, method = 'GET', postData, getParams }) {\n    method = method.toUpperCase();\n    const request = Object.assign({ method },\n        method === 'POST' ? { body: JSON.stringify(postData) } : {}\n    );\n\n    const requestPath = API_SERVER + path + (method === 'GET' && getParams ? '?' + encodeURI(Object.entries(getParams).map(itm => `${itm[0]}=${itm[1]}`).join('&')) : '');\n\n    let response = fetch(requestPath, request);\n\n    return await checkResponse(response);\n}\n\n\nexport default tasks;","import tasksApi from 'api/tasks';\n\nexport const REQUEST_TASKS = 'REQUEST_TASKS';\nexport const RECEIVE_TASKS = 'RECEIVE_TASKS';\nexport const SET_TASKS_SORT = 'SET_TASKS_SORT';\n\nfunction requestTasks() {\n    return {\n        type: REQUEST_TASKS,\n    };\n}\n\nfunction receiveTasks(page, data) {\n    return {\n        type: RECEIVE_TASKS,\n        payload: {\n            ...data,\n            page\n        }\n    };\n}\n\nexport function fetchTasks(page) {\n    return async (dispatch, getState) => {\n        dispatch(requestTasks());\n        const {tasksState: {pagination, sort}} = getState();\n        const requiredPage = typeof page != 'undefined' ? page : pagination.page;\n        const result = await tasksApi.get(requiredPage, sort || {});\n\n        dispatch(receiveTasks(requiredPage, result));\n    };\n}\n\nfunction shouldFetch(state) {\n\n    if (state.isFetching) {\n        return false;\n    } else if (!state.items) {\n        return true;\n    } else if (state.didInvalidate || state.lastUpdate < (Date.now() - 1000 * 60)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function updateIfNeeded() {\n    return (dispatch, getState) => {\n        const { tasksState } = getState();\n\n        if (shouldFetch(tasksState)) {\n            dispatch(fetchTasks());\n        }\n    };\n}\n\nfunction setTasksSort(fieldName) {\n    return {\n        type: SET_TASKS_SORT,\n        payload: fieldName,\n    };\n}\n\nexport function sortTasks(fieldName) {\n    return dispatch => {\n        dispatch(setTasksSort(fieldName));\n        dispatch(fetchTasks());\n    }\n}\n","import { REQUEST_TASKS, RECEIVE_TASKS, SET_TASKS_SORT } from 'actions/tasks';\n\nconst initalState = {\n    items: null,\n    isFetching: false,\n    lastUpdate: null,\n    didInvalidate: false,\n    sort: null,\n    pagination: {\n        page: 1,\n    },\n    error: null,\n};\n\nconst tasksReducer = (state = initalState, action) => {\n    switch (action.type) {\n        case REQUEST_TASKS:\n            return {\n                ...state,\n                isFetching: true,\n            };\n        case RECEIVE_TASKS:\n            const newState = {\n                isFetching: false,\n                didInvalidate: false,\n                lastUpdate: Date.now(),\n                pagination: {\n                    ...state.pagination,\n                    page: action.payload.page\n                },\n            };\n\n            if (action.payload.status =! 'ok') {\n                return {\n                    ...state,\n                    ...newState,\n                    error: action.payload.message,\n                    items: null,\n                };\n            }\n\n            return {\n                ...state,\n                ...newState,\n                error: null,\n                items: action.payload.message.tasks,\n                pagination: {\n                    ...newState.pagination,\n                    total: Math.floor(action.payload.message.total_task_count / 3)\n                },\n            };\n        case SET_TASKS_SORT:\n            const newSort = {\n                sort_field: action.payload,\n                sort_direction:\n                    state.sort && state.sort.sort_field === action.payload && state.sort.sort_direction === 'asc'\n                    ? 'desc'\n                    : 'asc'\n            };\n\n            return {\n                ...state,\n                sort: {\n                    ...newSort\n                },\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default tasksReducer;\n","import { combineReducers } from 'redux';\n\nimport loggedCustomerState from './loggedCustomerReducer';\nimport tasksState from './tasksReducer';\n\nconst rootReducer = combineReducers({\n    loggedCustomerState,\n    tasksState,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nlet middlewares = [thunkMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n    const { logger } = require('redux-logger');\n\n    middlewares.push(logger);\n}\n\nconst store = createStore(\n    rootReducer,\n    undefined, // Inital State\n    applyMiddleware(...middlewares)\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from \"react-toastify\";\n\nimport { logoutCustomer, setLoggedCustomer, customerLoginPending } from '../../actions/login';\n\nfunction mapStateToProps({loggedCustomerState: {customer = null}}) {\n    return {\n        customer\n    };\n}\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            password: ''\n        };\n    }\n\n    updateState = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    doLogout = () => {\n        const {dispatch} = this.props;\n        dispatch(logoutCustomer());\n    }\n\n    doLogin = (e) => {\n        e.preventDefault();\n\n        const {name, password} = this.state;\n\n        if (name === 'admin' && password === '123') {\n            const {dispatch} = this.props;\n\n            dispatch(customerLoginPending());\n\n            setTimeout(() => {\n                dispatch(setLoggedCustomer({\n                    name: 'Admin',\n                    login: 'admin',\n                    role: 'admin'\n                }));\n            }, 3000);\n        } else {\n            toast.error('Credentials uncorrect');\n        }\n    }\n\n    render() {\n        const {customer} = this.props;\n        const {name, password} = this.state;\n        return (\n            <>\n                {customer\n                    ? <span className=\"navbar-text float-right\">\n                        {customer.name}\n                        <a\n                            href=\"/logout\"\n                            onClick={this.doLogout}> Logout</a>\n                    </span>\n                    : <form className=\"form-inline my-2 my-lg-0\" onSubmit={this.doLogin}>\n                        <input\n                            id=\"name\"\n                            className=\"form-control mr-sm-2\"\n                            type=\"text\"\n                            name=\"name\"\n                            placeholder=\"Login\"\n                            onChange={this.updateState} />\n                        <input\n                            id=\"password\"\n                            className=\"form-control mr-sm-2\"\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            onChange={this.updateState} />\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" disabled={!(name && password)}>Login</button>\n                </form>}\n            </>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(Login);\n","import React from 'react';\nimport Login from './components/Login';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <header>\n            <nav className=\"navbar navbar-light bg-light\">\n                <Link className=\"navbar-brand\" to=\"/\">BrandName</Link>\n\n                <Login />\n            </nav>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <div>\n            Copyrights 2018\n        </div>\n    );\n};\n\nexport default Footer;","import './Loading.css';\nimport React from 'react';\n\nconst Loading = ({ dark, relative }) => {\n    return (\n        <div className={'loading' + (dark ? ' m-dark' : '') + (relative ? ' m-relative' : '')}>\n            <div className=\"signal\"></div>\n        </div>\n    );\n};\n\nexport default Loading;\n","import React from 'react';\n\nconst Pagination = ({ pagination, loadPage}) => {\n    const {page, total} = pagination;\n    const pages = getPages(page, total);\n\n    return (\n        <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n                {page !== 1 && <li className=\"page-item\">\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(1)}>First</a>\n                </li>}\n                <li className={`page-item d-none d-md-block${page == 1 ? ' disabled' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(page - 1)}>Previous</a>\n                </li>\n\n                {pages[0] > 1 && <li className=\"page-item d-none d-md-block disabled\"><a className=\"page-link\" href=\"#\">...</a></li>}\n\n                {pages.map(itm => <li key={itm} className={`page-item${page === itm ? ' active' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(itm)}>{itm}</a>\n                </li>)}\n\n                {pages[pages.length - 1] < total && <li className=\"page-item d-none d-md-block disabled\"><a className=\"page-link\" href=\"#\">...</a></li>}\n\n                <li className={`page-item d-none d-md-block${page == total ? ' disabled' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(page + 1)}>Next</a>\n                </li>\n\n                {page != total && <li className=\"page-item\">\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(total)}>Last</a>\n                </li>}\n            </ul>\n        </nav>\n    );\n};\n\nconst getPages = (page, total) => {\n    const pages = [];\n    const delta = 3;\n\n    for (let i = 1; i <= total; i++) {\n        if (i <= page && i > page - delta || i >= page && i < page + delta) {\n            pages.push(i);\n        }\n    }\n\n    return pages;\n}\n\nexport default Pagination;\n","import './TaskList.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateIfNeeded, fetchTasks, sortTasks } from 'actions/tasks';\nimport Pagination from '../../components/Pagination';\n\nfunction mapStateToProps({tasksState: {items: tasks, pagination, isFetching, sort}}) {\n    return {\n        tasks,\n        pagination,\n        isFetching,\n        sort,\n    };\n}\n\nclass TaskList extends Component {\n    componentDidMount() {\n        const {dispatch} = this.props;\n\n        dispatch(updateIfNeeded());\n    }\n\n    loadPage = (page) => {\n        const { dispatch } = this.props;\n\n        dispatch(fetchTasks(page));\n    }\n\n    viewTask = (id) => {\n        const {history} = this.props;\n        history.push('/task/' + id);\n    }\n\n    sortTasks = (id) => {\n        const { dispatch } = this.props;\n\n        dispatch(sortTasks(id));\n    }\n\n    render() {\n        const { tasks, pagination, isFetching } = this.props;\n\n        return (\n            <div className=\"task-list\">\n                {tasks\n                    ? <>\n                        <h1>Task list</h1>\n                        <ul className=\"task-list__list\">\n                            <li className=\"task-list__title\">\n                                <div className=\"task-list__status\">\n                                    <a href=\"#\" onClick={() => this.sortTasks('state')}>St</a>\n                                </div>\n                                <div className=\"task-list__name\">\n                                    <a href=\"#\" onClick={() => this.sortTasks('username')}>User name</a>\n                                </div>\n                                <div className=\"task-list__email\"><a href=\"#\" onClick={() => this.sortTasks('email')}>Email</a></div>\n                                <div className=\"task-list__text\">Text</div>\n                                <div className=\"task-list__id\"><a href=\"#\" onClick={() => this.sortTasks('id')}>ID</a></div>\n                            </li>\n                            {tasks.map((itm, idx) => <li key={itm.id} className=\"task-list__item\" onClick={() => this.viewTask(idx)}>\n                                <div className=\"task-list__status\">\n                                    <input type=\"checkbox\" checked={itm.status} disabled/>\n                                </div>\n                                <div className=\"task-list__name\">\n                                    {itm.username}\n                                </div>\n                                <div className=\"task-list__email\">{itm.email}</div>\n                                <div className=\"task-list__text\">{itm.text}</div>\n                                <div className=\"task-list__id\">{itm.id}</div>\n                            </li>)}\n                        </ul>\n                        <Pagination pagination={pagination} loadPage={this.loadPage} />\n                    </>\n                    : <div>{!isFetching ? 'Task list is empty' : ''}</div>\n                }\n                {isFetching && <div>Loading...</div>}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(TaskList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './TaskItem.css';\n\nfunction mapStateToProps({tasksState}, {task, match:{params: {id}}}) {\n    return {\n        task: task || tasksState.items && tasksState.items[id]\n    };\n}\n\nclass TaskItem extends Component {\n    componentWillMount() {\n        if (!this.props.task) {\n            this.props.history.replace('/');\n        }\n    }\n\n    render() {\n        const {task, history} = this.props;\n\n        if (!task) {\n            return null;\n        }\n\n        return (\n            <div className=\"task-item\">\n                <h1>Task</h1>\n                <div className=\"task-item__content\">\n                    <p><span className=\"task-item__title\">id:</span> {task.id}</p>\n                    <p><span className=\"task-item__title\">username:</span> {task.username}</p>\n                    <p><span className=\"task-item__title\">email:</span> {task.email}</p>\n                    <p><span className=\"task-item__title\">text:</span> {task.text}</p>\n                    <p><span className=\"task-item__title\">image</span></p>\n                    <img src={task.image_path} alt=\"\"/>\n                </div>\n                <nav><a href=\"#\" onClick={() =>history.goBack()}>Back</a></nav>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(TaskItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport './Home.css';\n\nimport Header from '../Header';\nimport Footer from '../../components/Footer';\nimport Loading from '../../components/loading/Loading';\nimport TaskList from '../task-list/TaskList';\nimport TaskItem from '../task-item/TaskItem';\n\nfunction mapStateToProps({loggedCustomerState: {pending}}) {\n    return {\n        pending\n    };\n}\n\nclass Home extends Component {\n    render() {\n        const {pending} = this.props;\n        return (\n            <>\n                <Header/>\n                <div className=\"container main-content\">\n                    <Switch>\n                        <Route path=\"/\" exact component={TaskList} />\n                        <Route path=\"/task/:id\" component={TaskItem} />\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </div>\n                <Footer/>\n                <ToastContainer autoClose={2000} />\n                {pending && <Loading dark={true}/>}\n            </>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(Home);\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Home from './containers/home/Home';\n\nconst router = () => {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    );\n};\n\nexport default router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport MainRouter from './router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}