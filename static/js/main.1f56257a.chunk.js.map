{"version":3,"sources":["actions/login.js","reducers/loggedCustomerReducer.js","api/tasks.js","actions/tasks.js","reducers/tasksReducer.js","reducers/index.js","store.js","containers/components/Login.js","containers/Header.js","components/Footer.js","components/loading/Loading.js","components/Pagination.js","containers/task-list/TaskList.js","containers/task-item/TaskItem.js","containers/home/Home.js","router.js","serviceWorker.js","index.js"],"names":["SET_LOGGED_CUSTOMER","CLEAR_LOGGED_CUSTOMER","CUSTOMER_LOGIN_PENDING","initialState","pending","logged","loggedCustomerReducer","state","arguments","length","undefined","action","type","Object","objectSpread","customer","payload","API_SERVER","API_SECRET","checkResponse","_x4","_checkResponse","apply","this","_callee4","response","regenerator_default","a","wrap","_context4","prev","next","then","res","json","err","code","message","catch","Response","status","statusText","abrupt","sent","stop","get","_callee5","_ref","path","_ref$method","method","postData","getParams","request","requestPath","_context5","toUpperCase","assign","body","concat","encodeURI","entries","map","itm","join","fetch","tasks","_get2","asyncToGenerator","mark","_callee","page","sort","_args","_context","developer","create","_create","_callee2","data","_context2","_x","update","_update","_callee3","id","_context3","_x2","_x3","REQUEST_TASKS","RECEIVE_TASKS","SET_TASKS_SORT","receiveTasks","fetchTasks","dispatch","getState","_getState","_getState$tasksState","pagination","requiredPage","result","tasksState","tasksApi","updateIfNeeded","isFetching","items","didInvalidate","lastUpdate","Date","now","sortTasks","fieldName","setTasksSort","initalState","error","tasksReducer","newState","total","Math","floor","total_task_count","newSort","sort_field","sort_direction","rootReducer","combineReducers","loggedCustomerState","middlewares","thunkMiddleware","store","createStore","applyMiddleware","Login","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateState","e","setState","defineProperty","target","name","value","doLogout","preventDefault","doLogin","_this$state","password","setTimeout","login","role","toast","_this$state2","react_default","createElement","Fragment","className","href","onClick","onSubmit","placeholder","onChange","disabled","Component","connect","_ref$loggedCustomerSt","Header","Link","to","components_Login","Footer","Loading","dark","relative","getPages","pages","i","push","Pagination","loadPage","aria-label","key","TaskList","viewTask","history","_this2","_this$props","idx","checked","username","email","text","components_Pagination","_ref$tasksState","TaskItem","input","files","prevState","task","formData","_this$state$task","dataList","signature","FormData","token","b","forEach","append","encodeURIComponent","md5","handleResponse","_ref3","form","submit","mode","previewToggle","preview","React","createRef","test","htmlFor","accept","image","src","image_path","URL","createObjectURL","alt","goBack","nextProps","_nextProps$match$para","match","params","find","Home","containers_Header","Switch","Route","exact","component","Redirect","components_Footer","lib","autoClose","components_loading_Loading","router","es","BrowserRouter","Boolean","window","location","hostname","ReactDOM","render","src_router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f56257a.chunk.js","sourcesContent":["export const SET_LOGGED_CUSTOMER = 'SET_LOGGED_CUSTOMER';\nexport const CLEAR_LOGGED_CUSTOMER = 'CLEAR_LOGGED_CUSTOMER';\nexport const CUSTOMER_LOGIN_PENDING = 'CUSTOMER_LOGIN_PENDING';\n\nexport function setLoggedCustomer(customer) {\n    return {\n        type: SET_LOGGED_CUSTOMER,\n        payload: customer\n    };\n}\n\nexport function logoutCustomer() {\n    return {\n        type: CLEAR_LOGGED_CUSTOMER,\n    };\n}\n\nexport function customerLoginPending() {\n    return {\n        type: CUSTOMER_LOGIN_PENDING\n    };\n}\n","import { SET_LOGGED_CUSTOMER, CUSTOMER_LOGIN_PENDING, CLEAR_LOGGED_CUSTOMER } from '../actions/login';\n\nconst initialState = {\n    pending: false,\n    logged: false\n};\n\nconst loggedCustomerReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_LOGGED_CUSTOMER:\n\n            return {\n                ...state,\n                logged: true,\n                pending: false,\n                customer: {\n                    ...action.payload,\n                },\n            };\n        case CUSTOMER_LOGIN_PENDING:\n            return {\n                ...state,\n                pending: true\n            };\n        case CLEAR_LOGGED_CUSTOMER:\n            return {\n                ...state,\n                logged: false,\n                customer: null,\n                pending: false\n            };\n\n            default:\n            return state;\n    }\n};\n\nexport default loggedCustomerReducer;\n","export const API_SERVER = 'https://uxcandy.com/~shapoval/test-task-backend';\nexport const API_SECRET = 'Name';\n\nconst tasks = {\n    async get(page = 1, sort = {}) {\n        return await get({\n            path: '/',\n            getParams: {\n                developer: API_SECRET,\n                page,\n                ...sort,\n            }\n        });\n    },\n\n    async create(data) {\n        return await get({\n            path: '/create',\n            method: 'POST',\n            postData: data,\n        });\n    },\n\n    async update(data, id) {\n        return await get({\n            path: '/edit/' + id,\n            method: 'POST',\n            postData: data,\n        });\n    },\n};\n\nexport async function checkResponse(response) {\n\n    return await response\n        .then(res => {\n            return res.json();\n        }, err => ({\n            code: 504,\n            message: 'Server timeout'\n        }))\n        .catch(() => response)\n        .then(res => {\n            if (res instanceof Response === false) {\n                return res;\n            }\n\n            return {\n                status: 'error',\n                message: res.statusText,\n            };\n        });\n}\n\nexport async function get({ path, method = 'GET', postData, getParams }) {\n    method = method.toUpperCase();\n    const request = Object.assign({ method },\n        method === 'POST' ? { body: postData } : {}\n    );\n\n    const requestPath = API_SERVER + path + `?developer=${API_SECRET}`\n        + (getParams ? '&' + encodeURI(\n            Object.entries(getParams)\n                .map(itm => `${itm[0]}=${itm[1]}`)\n                .join('&'))\n        : '');\n\n    let response = fetch(requestPath, request);\n\n    return await checkResponse(response);\n}\n\n\nexport default tasks;","import tasksApi from 'api/tasks';\n\nexport const REQUEST_TASKS = 'REQUEST_TASKS';\nexport const RECEIVE_TASKS = 'RECEIVE_TASKS';\nexport const SET_TASKS_SORT = 'SET_TASKS_SORT';\n\nfunction requestTasks() {\n    return {\n        type: REQUEST_TASKS,\n    };\n}\n\nfunction receiveTasks(page, data) {\n    return {\n        type: RECEIVE_TASKS,\n        payload: {\n            ...data,\n            page\n        }\n    };\n}\n\nexport function fetchTasks(page) {\n    return async (dispatch, getState) => {\n        dispatch(requestTasks());\n        const {tasksState: {pagination, sort}} = getState();\n        const requiredPage = typeof page != 'undefined' ? page : pagination.page;\n        const result = await tasksApi.get(requiredPage, sort || {});\n\n        dispatch(receiveTasks(requiredPage, result));\n    };\n}\n\nfunction shouldFetch(state) {\n\n    if (state.isFetching) {\n        return false;\n    } else if (!state.items) {\n        return true;\n    } else if (state.didInvalidate || state.lastUpdate < (Date.now() - 1000 * 60)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function updateIfNeeded() {\n    return (dispatch, getState) => {\n        const { tasksState } = getState();\n\n        if (shouldFetch(tasksState)) {\n            dispatch(fetchTasks());\n        }\n    };\n}\n\nfunction setTasksSort(fieldName) {\n    return {\n        type: SET_TASKS_SORT,\n        payload: fieldName,\n    };\n}\n\nexport function sortTasks(fieldName) {\n    return dispatch => {\n        dispatch(setTasksSort(fieldName));\n        dispatch(fetchTasks());\n    }\n}\n","import { REQUEST_TASKS, RECEIVE_TASKS, SET_TASKS_SORT } from 'actions/tasks';\n\nconst initalState = {\n    items: null,\n    isFetching: false,\n    lastUpdate: null,\n    didInvalidate: false,\n    sort: null,\n    pagination: {\n        page: 1,\n    },\n    error: null,\n};\n\nconst tasksReducer = (state = initalState, action) => {\n    switch (action.type) {\n        case REQUEST_TASKS:\n            return {\n                ...state,\n                isFetching: true,\n            };\n        case RECEIVE_TASKS:\n            const newState = {\n                isFetching: false,\n                didInvalidate: false,\n                lastUpdate: Date.now(),\n                pagination: {\n                    ...state.pagination,\n                    page: action.payload.page\n                },\n            };\n\n            if (action.payload.status =! 'ok') {\n                return {\n                    ...state,\n                    ...newState,\n                    error: action.payload.message,\n                    items: null,\n                };\n            }\n\n            return {\n                ...state,\n                ...newState,\n                error: null,\n                items: action.payload.message.tasks,\n                pagination: {\n                    ...newState.pagination,\n                    total: Math.floor(action.payload.message.total_task_count / 3)\n                },\n            };\n        case SET_TASKS_SORT:\n            const newSort = {\n                sort_field: action.payload,\n                sort_direction:\n                    state.sort && state.sort.sort_field === action.payload && state.sort.sort_direction === 'asc'\n                    ? 'desc'\n                    : 'asc'\n            };\n\n            return {\n                ...state,\n                sort: {\n                    ...newSort\n                },\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default tasksReducer;\n","import { combineReducers } from 'redux';\n\nimport loggedCustomerState from './loggedCustomerReducer';\nimport tasksState from './tasksReducer';\n\nconst rootReducer = combineReducers({\n    loggedCustomerState,\n    tasksState,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nlet middlewares = [thunkMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n    const { logger } = require('redux-logger');\n\n    middlewares.push(logger);\n}\n\nconst store = createStore(\n    rootReducer,\n    undefined, // Inital State\n    applyMiddleware(...middlewares)\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from \"react-toastify\";\n\nimport { logoutCustomer, setLoggedCustomer, customerLoginPending } from '../../actions/login';\n\nfunction mapStateToProps({loggedCustomerState: {customer = null}}) {\n    return {\n        customer\n    };\n}\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            password: ''\n        };\n    }\n\n    updateState = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    doLogout = (e) => {\n        const {dispatch} = this.props;\n        dispatch(logoutCustomer());\n        e.preventDefault();\n    }\n\n    doLogin = (e) => {\n        e.preventDefault();\n\n        const {name, password} = this.state;\n\n        if (name === 'admin' && password === '123') {\n            const {dispatch} = this.props;\n\n            dispatch(customerLoginPending());\n\n            setTimeout(() => {\n                dispatch(setLoggedCustomer({\n                    name: 'Admin',\n                    login: 'admin',\n                    role: 'admin'\n                }));\n            }, 3000);\n        } else {\n            toast.error('Credentials uncorrect');\n        }\n    }\n\n    render() {\n        const {customer} = this.props;\n        const {name, password} = this.state;\n        return (\n            <>\n                {customer\n                    ? <span className=\"navbar-text float-right\">\n                        {customer.name}\n                        <a\n                            href=\"/logout\"\n                            onClick={this.doLogout}> Logout</a>\n                    </span>\n                    : <form className=\"form-inline my-2 my-lg-0\" onSubmit={this.doLogin}>\n                        <input\n                            id=\"name\"\n                            className=\"form-control mr-sm-2\"\n                            type=\"text\"\n                            name=\"name\"\n                            placeholder=\"Login\"\n                            onChange={this.updateState} />\n                        <input\n                            id=\"password\"\n                            className=\"form-control mr-sm-2\"\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            onChange={this.updateState} />\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" disabled={!(name && password)}>Login</button>\n                </form>}\n            </>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(Login);\n","import React from 'react';\nimport Login from './components/Login';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <header>\n            <nav className=\"navbar navbar-light bg-light\">\n                <Link className=\"navbar-brand\" to=\"/\">BrandName</Link>\n                <Link className=\"navbar-Link\" to=\"/task/create\">Create new</Link>\n\n                <Login />\n            </nav>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"container\">\n                Copyrights 2018\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;","import './Loading.css';\nimport React from 'react';\n\nconst Loading = ({ dark, relative }) => {\n    return (\n        <div className={'loading' + (dark ? ' m-dark' : '') + (relative ? ' m-relative' : '')}>\n            <div className=\"signal\"></div>\n        </div>\n    );\n};\n\nexport default Loading;\n","import React from 'react';\n\nconst Pagination = ({ pagination, loadPage}) => {\n    const {page, total} = pagination;\n    const pages = getPages(page, total);\n\n    return (\n        <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n                {page !== 1 && <li className=\"page-item\">\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(1)}>First</a>\n                </li>}\n                <li className={`page-item d-none d-md-block${page == 1 ? ' disabled' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(page - 1)}>Previous</a>\n                </li>\n\n                {pages[0] > 1 && <li className=\"page-item d-none d-md-block disabled\"><a className=\"page-link\" href=\"#\">...</a></li>}\n\n                {pages.map(itm => <li key={itm} className={`page-item${page === itm ? ' active' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(itm)}>{itm}</a>\n                </li>)}\n\n                {pages[pages.length - 1] < total && <li className=\"page-item d-none d-md-block disabled\"><a className=\"page-link\" href=\"#\">...</a></li>}\n\n                <li className={`page-item d-none d-md-block${page == total ? ' disabled' : ''}`}>\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(page + 1)}>Next</a>\n                </li>\n\n                {page != total && <li className=\"page-item\">\n                    <a className=\"page-link\" href=\"#\" onClick={() => loadPage(total)}>Last</a>\n                </li>}\n            </ul>\n        </nav>\n    );\n};\n\nconst getPages = (page, total) => {\n    const pages = [];\n    const delta = 3;\n\n    for (let i = 1; i <= total; i++) {\n        if (i <= page && i > page - delta || i >= page && i < page + delta) {\n            pages.push(i);\n        }\n    }\n\n    return pages;\n}\n\nexport default Pagination;\n","import './TaskList.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateIfNeeded, fetchTasks, sortTasks } from 'actions/tasks';\nimport Pagination from '../../components/Pagination';\n\nfunction mapStateToProps({tasksState: {items: tasks, pagination, isFetching, sort}}) {\n    return {\n        tasks,\n        pagination,\n        isFetching,\n        sort,\n    };\n}\n\nclass TaskList extends Component {\n    componentDidMount() {\n        const {dispatch} = this.props;\n\n        dispatch(updateIfNeeded());\n    }\n\n    loadPage = (page) => {\n        const { dispatch } = this.props;\n\n        dispatch(fetchTasks(page));\n    }\n\n    viewTask = (id) => {\n        const {history} = this.props;\n        history.push('/task/view/' + id);\n    }\n\n    sortTasks = (id) => {\n        const { dispatch } = this.props;\n\n        dispatch(sortTasks(id));\n    }\n\n    render() {\n        const { tasks, pagination, isFetching, history } = this.props;\n\n        return (\n            <div className=\"task-list\">\n                {tasks\n                    ? <>\n                        <h1>Task list</h1>\n                        <ul className=\"task-list__list\">\n                            <li className=\"task-list__title\">\n                                <div className=\"task-list__status\">\n                                    <a href=\"#\" onClick={() => this.sortTasks('state')}>St</a>\n                                </div>\n                                <div className=\"task-list__name\">\n                                    <a href=\"#\" onClick={() => this.sortTasks('username')}>User name</a>\n                                </div>\n                                <div className=\"task-list__email\"><a href=\"#\" onClick={() => this.sortTasks('email')}>Email</a></div>\n                                <div className=\"task-list__text\">Text</div>\n                                <div className=\"task-list__id\"><a href=\"#\" onClick={() => this.sortTasks('id')}>ID</a></div>\n                            </li>\n                            {tasks.map((itm, idx) => <li key={itm.id} className=\"task-list__item\" onClick={() => this.viewTask(itm.id)}>\n                                <div className=\"task-list__status\">\n                                    <input type=\"checkbox\" checked={itm.status} disabled/>\n                                </div>\n                                <div className=\"task-list__name\">\n                                    {itm.username}\n                                </div>\n                                <div className=\"task-list__email\">{itm.email}</div>\n                                <div className=\"task-list__text\">{itm.text}</div>\n                                <div className=\"task-list__id\">{itm.id}</div>\n                            </li>)}\n                        </ul>\n                        <Pagination pagination={pagination} loadPage={this.loadPage} />\n                    </>\n                    : <div>{!isFetching ? 'Task list is empty' : ''}</div>\n                }\n                {isFetching && <div>Loading...</div>}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(TaskList);\n","import './TaskItem.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport md5 from 'md5';\n\nimport tasksApi from 'api/tasks';\nimport { fetchTasks } from 'actions/tasks';\n\n\nfunction mapStateToProps({tasksState: {items}, loggedCustomerState: {customer}}) {\n    return {\n        tasks: items,\n        customer,\n    };\n}\n\nclass TaskItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            preview: false,\n            error: null,\n        };\n        this.form = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { match: { params: { mode, id } }, tasks} = nextProps;\n        const {mode: prevMode} = prevState;\n\n        if (mode === prevMode) {\n            return prevState;\n        }\n\n        const task = /view|edit/.test(mode) && +id && tasks && tasks.find(itm => itm.id === +id) || {username: '', email: '', text: '', image: ''};\n\n        return {\n            task: {\n                ...task,\n                image: ''\n            },\n            mode,\n            preview: false,\n        };\n    }\n\n\n    updateState = (e) => {\n        const input = e.target;\n        let value;\n        if (input.type == 'checkbox') {\n            value = input.checked;\n        } else if (input.type == 'file') {\n            value = { files: input.files, value: input.value };\n        } else {\n            value = input.value;\n        }\n\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [input.name]: value\n            }\n        }));\n    }\n\n    update = async () => {\n        const formData = new FormData();\n        const token = 'beejee';\n        let {text, status, id} = this.state.task;\n        status = status ? 10 : 0;\n        const data = { token, text, status};\n        const dataList = Object.entries(data)\n            .sort((a, b)=> a[0] > b[0]);\n        dataList.forEach(itm => formData.append(itm[0], itm[1]));\n\n        const signature = dataList\n            .map(itm => encodeURIComponent(itm[0]) + '=' + encodeURIComponent(itm[1]))\n            .join('&');\n\n        formData.append('signature', md5(signature))\n\n        const result = await tasksApi.update(formData, id);\n        this.handleResponse(result);\n    }\n\n    create = async (form) => {\n        const result = await tasksApi.create(form);\n        this.handleResponse(result);\n    }\n\n    handleResponse = (response) => {\n        if (response.status == 'ok') {\n            this.props.dispatch(fetchTasks());\n            this.props.history.push('/');\n        } else {\n            this.setState({\n                error: Object.entries(response.message).map(itm => `${itm[0]} - ${itm[1]}`)\n            });\n        }\n\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const {mode} = this.state;\n        if (mode == 'create') {\n            this.create(formData);\n        } else {\n            this.update(formData);\n        }\n    }\n\n    previewToggle = () => {\n        const {preview} = this.state;\n\n        if (preview) {\n            this.form = this.formData;\n        } else {\n            this.formData = this.form;\n        }\n\n        this.setState(prevState => ({ preview: !prevState.preview }));\n    }\n\n    render() {\n\n        const { history, customer } = this.props;\n        const { task, mode, preview, error} = this.state;\n\n        if (mode == 'edit' && (!customer || customer.role != 'admin')) {\n            return <div className=\"alert alert-danger\" role=\"alert\">\n                Permission denied!\n                Please login as admin.\n            </div>;\n        }\n\n        return (\n            <div className=\"task-item\">\n                <h1>Task</h1>\n                {/create|edit/.test(mode) && (\n                    <div className=\"task-item__content\">\n                        <form className={preview ? ' d-none' : ''} name=\"task\" onSubmit={this.submit}>\n                            {mode == 'create' && <div className=\"form-group\">\n                                <label htmlFor=\"task-username\">User name</label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"task-username\"\n                                    name=\"username\"\n                                    placeholder=\"User name\"\n                                    value={task.username}\n                                    onChange={this.updateState}/>\n                            </div>}\n                            {mode == 'create' && <div className=\"form-group\">\n                                <label htmlFor=\"task-username\">Email</label>\n                                <input\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"task-email\"\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    value={task.email}\n                                    onChange={this.updateState}/>\n                            </div>}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"task-text\">Text</label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"task-text\"\n                                    name=\"text\"\n                                    placeholder=\"Text\"\n                                    value={task.text}\n                                    onChange={this.updateState}/>\n                            </div>\n                            {mode == 'create' && <div className=\"form-group\">\n                                <label htmlFor=\"task-image\">Image</label>\n                                <input\n                                    type=\"file\"\n                                    className=\"form-control-file\"\n                                    id=\"task-image\"\n                                    name=\"image\"\n                                    accept=\".jpg, .jpeg, .png\"\n                                    files={task.image && task.image.files}\n                                    value={task.image && task.image.value}\n                                    onChange={this.updateState}/>\n                            </div>}\n                            {mode == 'edit' && <div className=\"form-group\">\n                                <label htmlFor=\"task-status\">Status</label>\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"form-control-file\"\n                                    id=\"task-status\"\n                                    name=\"status\"\n                                    checked={task.status}\n                                    onChange={this.updateState} />\n                            </div>}\n                            <div className=\"form-group\">\n                                 <button\n                                    className=\"btn btn-primary\">\n                                    Save\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n                {(mode == 'view' || preview) && <div className=\"task-item__content\">\n                        <p><span className=\"task-item__title\">id:</span> {task.id}</p>\n                        {mode != 'create' && <p><span className=\"task-item__title\">status: </span>\n                        <input type=\"checkbox\" disabled checked={task.status}/></p>}\n                        <p><span className=\"task-item__title\">username:</span> {task.username}</p>\n                        <p><span className=\"task-item__title\">email:</span> {task.email}</p>\n                        <p><span className=\"task-item__title\">text:</span> {task.text}</p>\n                        <p><span className=\"task-item__title\">image</span></p>\n                    <img className=\"task-item__img\" src={task.image_path || task.image && URL.createObjectURL(task.image.files[0])} alt=\"\"/>\n                    </div>\n                }\n                {error && <div className=\"alert alert-danger\" role=\"alert\">\n                    <ul>\n                        {error.map(itm => <li key={itm}>{itm}</li>)}\n                    </ul>\n                </div>}\n                <p>\n                </p>\n                <nav>\n                    <a className=\"btn btn-light\" href=\"#\" onClick={() => {history.goBack()}}>Back</a>\n                    {mode == 'view' && customer && customer.role === 'admin' && <button\n                        className=\"btn btn-secondary\"\n                        type=\"button\"\n                        onClick={() => history.push('/task/edit/' + task.id)}>\n                            Edit\n                        </button>\n                    } {/edit|create/.test(mode) && <button\n                        className=\"btn btn-secondary\"\n                        type=\"button\"\n                        onClick={() => this.setState(prevState => ({preview: !prevState.preview}))}>\n                        {preview ? 'Back to edit' : 'Preview'}\n                    </button>}\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(TaskItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport './Home.css';\n\nimport Header from '../Header';\nimport Footer from '../../components/Footer';\nimport Loading from '../../components/loading/Loading';\nimport TaskList from '../task-list/TaskList';\nimport TaskItem from '../task-item/TaskItem';\n\nfunction mapStateToProps({loggedCustomerState: {pending}}) {\n    return {\n        pending\n    };\n}\n\nclass Home extends Component {\n    render() {\n        const {pending} = this.props;\n        return (\n            <>\n                <Header/>\n                <div className=\"container main-content\">\n                    <Switch>\n                        <Route path=\"/\" exact component={TaskList} />\n                        <Route path=\"/task/:mode(edit||view)/:id(\\d+)\" component={TaskItem} />\n                        <Route path=\"/task/:mode(create)\" component={TaskItem} />\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </div>\n                <Footer/>\n                <ToastContainer autoClose={2000} />\n                {pending && <Loading dark={true}/>}\n            </>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(Home);\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Home from './containers/home/Home';\n\nconst router = () => {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    );\n};\n\nexport default router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport MainRouter from './router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}